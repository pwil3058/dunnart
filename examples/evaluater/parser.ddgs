// parser.ddgs
//
// Copyright Peter Williams 2013 <pwil3058@bigpond.net.au>.
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
%{
// parser.d
//
// Copyright Peter Williams 2013 <pwil3058@bigpond.net.au>.
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

import std.stdio;

%}

%{
double evaluate(string text)
{
    double result; // leave initialised as NaN
%}

%field  double value

%token          PLUS    "+"
%token          MINUS   "-"
%token          TIMES   "*"
%token          DIVIDE  "/"
%token  <value> NUMBER  ([0-9]+(\.[0-9]+){0,1})
%token          LPR     "("
%token          RPR     ")"
%token          STRING  ("(\\"|[^"])*")
%token          BOGUS   "uv"

%skip   (\s+)

%right  UMINUS
%left   "*" "/"
%left   "+" "-"

%%
%inject "/dev/null"

equation: expr !{result = $1.value;!} .

expr: expr "+" expr !{$$.value = $1.value + $3.value;!}
    | expr "-" expr !{$$.value = $1.value - $3.value;!}
    | expr "*" expr !{$$.value = $1.value * $3.value;!}
    | expr "/" expr !{$$.value = $1.value / $3.value;!}
    | "(" expr ")" !{$$.value = $2.value;!}
    | "-" expr %prec UMINUS !{$$.value = -$2.value;!}
    | NUMBER !{$$.value = $1.value;!}
    | STRING !{ writeln("string: ", $1.dd_matched_text );!}
    | STRING STRING !{ writeln("string 1: ", $1.dd_matched_text, "; string 2:", $2.dd_matched_text );!}
    | BOGUS !{!}
    .

%{
    dd_parse_text(text);
    return result;
}
%}
