// dunnart specification for dunnart grammar specification language

%{
import ddlib.components;
import symbols; // This is only because we're bootstrapping

string preamble;

SymbolManager sm;

alias string[] TagList;
%}

%field  Symbol symbol
%field  TagList tagList;

%token  REGEX           (\(\S+\))
%token  LITERAL         ("\S+")
%token  TOKEN           "%token"
%token  FIELD           "%field"
%token  LEFT            "%left"
%token  RIGHT           "%right"
%token  NONASSOC        "%nonassoc"
%token  PRECEDENCE      "%prec"
%token  SKIP            "%skip"
%token  ERROR           "%error"
%token  LEXERROR        "%lexerror"
%token  NEWSECTION      "%%"
%token  IDENT           ([a-zA-Z]+[a-zA-Z0-9_]*)
%token  FIELDNAME       (<[a-zA-Z]+[a-zA-Z0-9_]*>)
%token  ACTION          (!\{(.|[\n\r])*?!\})
%token  DCODE           (%\{(.|[\n\r])*?%\})

%skip (/\*(.|[\n\r])*?\*/)
%skip (//[^\n\r]*)
%skip (\s+)

%%
specification: preamble definitions "%%" production_rules.

preamble: !{ \\ do nothing !}
    | DCODE !{ preamble = $1.ddString[2 .. $ - 2]. !}
    .

definitions : definition
    | definitions definition
    .

definition: token_definition
    | precedence_definition
    | field_definition
    | skip_definition
    .

token_definition: "%token" new_token_name pattern
        !{
            $$.symbol = sm.new_token($2.ddString, $3.ddString, $2.ddLocation);
        !} 
    | "%token" FIELDNAME new_token_name pattern
        !{
            $$.symbol = sm.new_token($3.ddString, $4.ddString, $3.ddLocation, $2.ddString[1 .. $ - 1]);
        !}
    .

new_token_name: IDENT ?( sm.is_known_symbol($1.ddString) ?)
        !{
            abort("already declared.", sm.get_declaration_point($1.ddString));
        !}
    | IDENT
    .

pattern: REGEX | LITERAL.

precedent_definition: "%left" tag_list
        !{
            foreach (tag; $2.tagList) {
                auto symbol = (tag.ddString in tokens) ? tokens[tag.ddString] : miscellaneousTags[tag.ddString];
                symbol.associativity = Associativity.left;
                symbol.precedence = currentPrecedence;
            }
            currentPrecedence--;
        !}
    | "%right" tag_list
        !{
            foreach (tag; $2.tagList) {
                auto symbol = (tag.ddString in tokens) ? tokens[tag.ddString] : miscellaneousTags[tag.ddString];
                symbol.associativity = Associativity.right;
                symbol.precedence = currentPrecedence;
            }
            currentPrecedence--;
        !}
    | "%nonassoc" tag_list
        !{
            foreach (tag; $2.tagList) {
                auto symbol = (tag.ddString in tokens) ? tokens[tag.ddString] : miscellaneousTags[tag.ddString];
                symbol.associativity = Associativity.nonassoc;
                symbol.precedence = currentPrecedence;
            }
            currentPrecedence--;
        !}
    .

tag_list: IDENT !{ $$.tagList = [$1.ddString] !}
    | tag_list IDENT !{ $1.tagList ~= $1.ddString !}
    .

field_definition: "$field" fieldType fieldName
        !{
            if ($3.ddString in fieldDefinitions) {
                auto previous = fieldDefinitions[$3.ddString].declaredAt;
                abort("already declared.", previous);
            }
            fieldDefinitions[$3.ddString] = new FieldDefinition($3.ddString, $2.ddString);
        !}
    | "$field" fieldType fieldName fieldConversionFunction
        !{
            if ($3.ddString in fieldDefinitions) {
                auto previous = fieldDefinitions[$3.ddString].declaredAt;
                abort("already declared.", previous);
            }
            fieldDefinitions[$3.ddString] = new FieldDefinition($3.ddString, $2.ddString, $4.ddString);
        !}
    .

skip_definition: "$skip" REGEX !{ skipList ~= $1.ddString; !}.

production_rules: production_list
    | production_rules production_list
    .

production_list: left_hand_side ":" right_hand_side_list "."

right_hand_sides_list: right_hand_side !{ $$.rhsList = [$1.rhs]; !}
    | right_hand_sides_list "|" right_hand_side !{ $$.rhsList = [$1].rhsList ~ [$3.rhs]; !}
    .

right_hand_side: ACTION
    | symbol_list ACTION
    | symbol_list PREDICATE ACTION
    | symbol_list PREDICATE
    .

symbol_list: symbol
    | symbol_list symbol
    .

symbol: IDENT | LITERAL | "%error" .

left_hand_side: IDENT.
